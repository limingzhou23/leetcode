给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。
一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。
示例 1:
输入: 12258
输出: 5
解释: 12258有5种不同的翻译，分别是"bccfi", "bwfi", "bczi", "mcfi"和"mzi"

思路：动态规划+滑动窗口
     转移函数是 f(i)=f(i-1)+f(i-2)   9<x<26
     以第i个元素结尾的翻译方法总数包括两种：1.i 和i-1分开翻译  一共有f(i-1)种
                                         2.i 和i-1一起翻译  一共有f(i-2)种，但需要满足两个数组成的数组大于9小于26
    滑动窗口技巧：每个i处的方案纸盒前两个有关 因此只需要维护3个数的一个窗口 在待处理列表上滑动即可
    


    def translateNum(self, num: int) -> int:
        numstr=str(num)
        rol=[0,0,1]
        for i in range(0,len(numstr)):
            rol[0] = rol[1]
            rol[1] = rol[2]
            rol[2] = 0
            rol[2] +=rol[1]
            if(i==0):continue
            two=numstr[i-1:i+1]
            if int(two)<26 and int(two)>9:
                rol[2] +=rol[0]

        return rol[2]
