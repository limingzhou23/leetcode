给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。
说明：每次只能向下或者向右移动一步。
示例:
输入:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 7
解释: 因为路径 1→3→1→1→1 的总和最小。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-path-sum

解题思路：与15，16类似，只是需要保存当前最小路径和即可




python 实现：
def findnums(n,m,nums,obs):
    if(nums[n-1][m-1]>=0):
        return nums[n-1][m-1]
    elif(n==1):
        q=findnums(n,m-1,nums,obs)+obs[n-1][m-1]
        nums[n-1][m-1]=q
        
    elif(m==1):
        q=findnums(n-1,m,nums,obs)+obs[n-1][m-1]
        nums[n-1][m-1]=q          
    else:
        q=min(findnums(n,m-1,nums,obs)+obs[n-1][m-1],findnums(n-1,m,nums,obs)+obs[n-1][m-1])
        nums[n-1][m-1]=q
    
    return q

class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        m=len(grid)
        n=len(grid[0])

        nums_matrix = [[-1 for i in range(n)] for j in range(m)]
        nums_matrix[0][0]=grid[0][0]           
        q=findnums(m,n,nums_matrix,grid)
        return q
