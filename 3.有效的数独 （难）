#判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

#数字 1-9 在每一行只能出现一次。
#数字 1-9 在每一列只能出现一次。
#数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
#数独部分空格内已填入了数字，空白格用 '.' 表示。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/valid-sudoku

输入：[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]

#思路：对每行，每列，每个宫进行重复元素判断
       使用字典做存储：这样可以获得某数字和该数字是否存在标识的对应关系，如果使用列表等结构，则加大复杂度
                     对数字7 字典可以直接存入 dic[7]=1
                     再次遇到数字7 直接使用not in 函数判断是否在字典内
                     对于宫的划分 使用整数除法  宫序号等于行*3+列
 
#知识点： 1.字典的创建
          2.continue关键字  跳出本次循环，直接开始下一次循环
          3.in , not in函数的使用
          4.整数除法的使用
          
python 代码：

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:

        dic_row = [{},{},{},{},{},{},{},{},{}]            # 每行的元素以一个字典储存，key是数字，value统一为1.
        dic_col = [{},{},{},{},{},{},{},{},{}]
        dic_box = [{},{},{},{},{},{},{},{},{}]
 
 
        for i in range(len(board)):
             for j in range(len(board)):
                num = board[i][j]
                if num == ".":
                     continue
                if num not in dic_row[i] and num not in dic_col[j] and num not in dic_box[3*(i//3)+(j//3)]:
                    dic_row[i][num] = 1
                    dic_col[j][num] = 1
                    dic_box[3*(i//3)+(j//3)][num] = 1       # 利用地板除，向下取余。巧妙地将矩阵划分为九块
                else:
                     return False
 

        
        return True
