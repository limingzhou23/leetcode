给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。
例如，给定三角形：
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。
说明：
如果你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题，那么你的算法会很加分。
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/triangle

解题思路：这是一个动态规划问题，子问题是n-1层的最小路径和加该层的最小路径。
         由于题目要求只使用O(N)的空间，我们考虑原地算法，可以看到，三角形层都比上层的元素多，
                                                              因此可以以最后一层作为存放数组，然后求自底向上的最小路径
         这道题精妙的解法，就是从底向上，利用记忆存储的方法，第n层，每个点的最小路径就是自身,
                                                         到n-1层每个点的最小路径是该点数字加上n层相邻的两个数字，取较小的存于n层1--len（n-1）
                                                         n-2层每个点的最小路径是该点数字加上n-1层相邻的两个数字，取较小的存于n层，不断刷新
                                                         直到遍历整个数组
知识点：1.原地算法的合理运用，不占用额外的内存空间
       2.要善于分析给定的数据结构的特点 更改子问题规模
python 实现:
class Solution(object):
    def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
        length=len(triangle)
        
        for i in range(length-2,-1,-1):
            for j in range(0,len(triangle[i])):
                triangle[-1][j]=triangle[i][j]+min(triangle[-1][j],triangle[-1][j+1])
        return triangle[-1][0]
