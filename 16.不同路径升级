一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。
现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？
输入:
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
输出: 2

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/unique-paths-ii

解题思路：与不同路径类似，只不过障碍点存在路径数目记为0即可



python 实现
def findnums(n,m,nums,obs):
    if(obs[n-1][m-1]==1):
        return 0
    elif(nums[n-1][m-1]>=0):
        return nums[n-1][m-1]
    elif(n==1):
        q=findnums(n,m-1,nums,obs)
        nums[n-1][m-1]=q
        
    elif(m==1):
        q=findnums(n-1,m,nums,obs)
        nums[n-1][m-1]=q          
    else:
        q=findnums(n,m-1,nums,obs)+findnums(n-1,m,nums,obs)
        nums[n-1][m-1]=q
    
    return q
class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        m=len(obstacleGrid)
        n=len(obstacleGrid[0])

        nums_matrix = [[-1 for i in range(n)] for j in range(m)]
        nums_matrix[0][0]=1           
        q=findnums(m,n,nums_matrix,obstacleGrid)
        return q
