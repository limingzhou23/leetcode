给定一些标记了宽度和高度的信封，宽度和高度以整数对形式 (w, h) 出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。

请计算最多能有多少个信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。

说明:
不允许旋转信封。

示例:

输入: envelopes = [[5,4],[6,4],[6,7],[2,3]]
输出: 3 
解释: 最多信封的个数为 3, 组合为: [2,3] => [5,4] => [6,7]。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/russian-doll-envelopes

思路：本质和30一样 先对宽度排序 然后对长度使用最长上升子序列
知识点：泛型算法sort(）的使用



C++实现：
#include <iostream>
#include <vector>
  bool compare(vector<int>& a,vector<int>& b)
        {
            if(a[0]==b[0]){
                return a[1]>b[1];
            }
            return a[0]<b[0];
        }

class Solution {
public:
    int maxEnvelopes(vector<vector<int>>& envelopes) {
        int length=envelopes.size();
        if(length<2){
            return length;
        }
        

        
        sort(envelopes.begin(),envelopes.end(),compare);
        
        vector<int> longest_ans;
        int total_num=0;
        longest_ans.push_back(envelopes[0][1]);
            
        for(int i=1;i<length;i++){
            if(envelopes[i][1]>longest_ans[total_num])
               {
                longest_ans.push_back(envelopes[i][1]);
                total_num++;
            }else{
                int left=0;
                int right=total_num;
                int target=envelopes[i][1];
                while(left<right){
                    int mid=(left+right)/2;
                    if(longest_ans[mid]<target){
                        left=mid+1;               
                    }else{
                        right=mid;}
                }
                longest_ans[left]=envelopes[i][1];
            }
        }
        
       
        return total_num+1;
    }
};
