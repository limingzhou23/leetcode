给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。
示例 1:
输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:
输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:
输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters


解题思路：我们可以定义字符到索引的映射，而不是使用集合来判断一个字符是否存在。 
          当我们找到重复的字符时，我们可以立即跳过该窗口。
         也就是说，如果 s[j] 与在 [i, j) 范围的 j ′重复，我们不需要逐渐增加 i 
         我们可以直接跳过 [i，j'] 范围内的所有元素，并将 i 变为 j' + 1。
         在此基础上继续查找是否有更长的不重复子序列
         
         例如 abcbbcbb  进行到abca时，b与b重复，于是跳过第一个ab  i=2 j=5
         
         具体的实现需要使用哈希表，对每个数字存储之前到该点的索引+1,这样遇到的元素是新元素的话就是从0计算，重复元素则从j'+1计算
知识点：1.哈希表的创建与使用
       2.python字符转换对应的数字

python实现：
import numpy as np
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s :return 0
        n = len(s)
        ans = 0
        
        index = np.zeros(128,dtype=int)
        i=0
        
        for j in range(0,n):
            i = max(index[ord(s[j])], i)
            ans = max(ans, j - i + 1)
            index[ord(s[j])] = j + 1

        return ans
