实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须原地修改，只允许使用额外常数空间。

以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/next-permutation
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

思路：
知识点：字典序的排列
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int flag = 0;
        int length=nums.size()-1;
        int i = length;
        for(; i > 0; i--)
        {
            if(nums[i - 1] < nums[i])
            {
                flag = i - 1;
                break;
            }
        }

        if(i == 0)//不存在下一个更大排列
            sort(nums.begin(),nums.end());//重新排成最小排列
        else
        {
            sort(nums.begin() + i,nums.end());
            int j = i;
            for(; j <=length; j++)
                if(nums[j] > nums[flag]) break;//找到刚好大于a[flag]的数
        //交换两个数
            int t = nums[flag];
            nums[flag] = nums[j];
            nums[j] = t;
    }
}

};
