给定一个无序的整数数组，找到其中最长上升子序列的长度。

示例:

输入: [10,9,2,5,3,7,101,18]
输出: 4 
解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。
说明:

可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。
你算法的时间复杂度应该为 O(n2) 。
进阶: 你能将算法的时间复杂度降低到 O(n log n) 吗?

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/longest-increasing-subsequence

思路：动态规划问题
拓展：贪心算法的学习 不断缩小前面数字 维护一个可能的最长子序列





C++实现：
#include <iostream>
#include <vector>

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int length=nums.size();
        if(length<2){return length;}
        vector<int> dp(length,1);
        for(int i=0;i<length;i++){
            for(int j=0;j<i;j++){
                if(nums[i]>nums[j]){
                    dp[i]=max(dp[j]+1,dp[i]);
                }
            }
        }
        int maxline=0;
        for(int i=0;i<length;i++)
        {
            maxline=max(dp[i],maxline);
        }
        return maxline;
        
    }
};

C++高效实现：
#include <iostream>
#include <vector>

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int length=nums.size();
        if(length<2){return length;}
        
        vector<int> dp;
        int total_num=0;
        dp.push_back(nums[0]);
            
        for(int i=1;i<length;i++){
            if(nums[i]>dp[total_num]){
                dp.push_back(nums[i]);
                total_num++;
            }else{
                int left=0;
                int right=total_num;
                int target=nums[i];
                while(left<right){
                    int mid=(left+right)/2;
                    if(dp[mid]<target){
                        left=mid+1;               
                    }else{
                        right=mid;}
                }
                dp[left]=nums[i];
            }
        }
        
       
        return total_num+1;
        
    }
};

