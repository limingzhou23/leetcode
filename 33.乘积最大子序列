给定一个整数数组 nums ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。

示例 1:

输入: [2,3,-2,4]
输出: 6
解释: 子数组 [2,3] 有最大乘积 6。
示例 2:

输入: [-2,0,-1]
输出: 0
解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximum-product-subarray

知识点：动态规划 维护当前最大最小数字 因为存在负数 会最大变最小 最小变最大
                最后得到总的最大的数字

c++代码：
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        if (nums.empty()) return 0;
        if (nums.size() == 1) return nums[0];
        int min_neg = 0;
        int max_pos = 0;
        int res = INT_MIN;//整型下限
    for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] == 0) {
                min_neg = max_pos = 0;
            } else if (nums[i] > 0) {
                max_pos = max(max_pos * nums[i], nums[i]);
                min_neg = min_neg * nums[i];
            } else {
                int t = max_pos;
                max_pos = min_neg * nums[i];
                min_neg = min(t * nums[i], nums[i]);
            }
            res = max(res, max_pos);
        }
        return res;


    }
};
