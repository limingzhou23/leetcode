一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。
我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。
骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。
有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数
（若房间里的值为负整数，则表示骑士将损失健康点数）；
其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球
（若房间里的值为正整数，则表示骑士将增加健康点数）。
为了尽快到达公主，骑士决定每次只向右或向下移动一步。

编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。

例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 右 -> 右 -> 下 -> 下，则骑士的初始健康点数至少为 7。

-2 (K)	-3	3
-5	-10	1
10	30	-5 (P)

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/dungeon-game

解题思路：本题看起来和前几个路径类似，因此可以将本题方法迁移。子问题是，来到这个房间所需要的最低生命值，至少是1，
                                                                                  或者是到达下一个房间的最小生命值减去本房间的变化
                                                                                  因为 到此房间时的生命=到下一个房间时的生命+本房间变化
知识点： 1.python二维数组的索引方法
        2.最优化子方案的划分
        3.回溯算法思想

python 实现：
class Solution(object):
    def calculateMinimumHP(self, dungeon):
        """
        :type dungeon: List[List[int]]
        :rtype: int
        """
        m=len(dungeon)
        n=len(dungeon[0])

        nums_matrix = [[0 for i in range(n)] for j in range(m)]
        nums_matrix[-1][-1]=max(1-dungeon[-1][-1],1)
        
        for i in range(m-2,-1,-1):
            nums_matrix[i][-1]=max(1,nums_matrix[i+1][-1]-dungeon[i][-1])
            
        for i in range(n-2,-1,-1):
            nums_matrix[-1][i]=max(1,nums_matrix[-1][i+1]-dungeon[-1][i])
        
        for i in range(m-2,-1,-1):
            for j in range(n-2,-1,-1):
                nums_matrix[i][j]=max(1,min(nums_matrix[i+1][j]-dungeon[i][j],nums_matrix[i][j+1]-dungeon[i][j]))
                
        
        return nums_matrix[0][0]
    
