你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/house-robber

解题思路：标准的动态规划，子问题分割为 偷1房间 加上偷3-n房间
                                    偷2房间 加上偷4-n房间

知识点：本题目思路与爬楼梯类似，但是备忘的实现花了一点心思，注意逆向思维。

python实现
import numpy as np
def maxmoney(list,nums):
    length=len(list)
    if(length==0):
        return 0
    elif(nums[length]>=0):
        return nums[length]
    elif(length==1):
        nums[1]=list[0]
        return nums[1]
    elif(length==2):
        nums[2]=max(list[0],list[1])
        return nums[2]
    elif(length==3):
        nums[3]=max(list[0]+list[2],list[1])
        return nums[3]
    else:
        max1=list[-1]+maxmoney(list[0:length-2],nums)
        max2=list[-2]+maxmoney(list[0:length-3],nums)
        nums[length]=max(max1,max2)
        return nums[length]
    
class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        length=len(nums)+1
        remo=np.zeros(length,dtype=int)
        for i in range(0,length):
            remo[i]=-1
            
        q=maxmoney(nums,remo)
        
        return q
