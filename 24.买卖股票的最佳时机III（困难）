给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
示例 1:
输入: [3,3,5,0,0,3,1,4]
输出: 6
解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii

解题思路：利用动态规划，要分割子问题，子问题是 1.目前手上没有股票 维持状态
                                            2.目前手上有股票 卖出（在最大交易数之内）
                                             目前有股票的状态也要拆分子问题  
                                             记得使用备忘
          设置dp数组 dp[k][i] 代表第i天 进行了k笔交易
          转移方程是：dp[k][i]=max(dp[k][i-1],dp[k-1][j]+prices[i]-prices[j])   j为从1到i意为第j天买入  等待i天卖出
          
知识点：1.多维数组创建
        2.复杂度缩小的方法      重要！！

python实现：
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        if not prices:return 0
        n=len(prices)
        dp=[[0]*n for _ in range(3)]
        
        for k in range(1,3):
            pre_max=-prices[0]
            for i in range(1,n):
                pre_max=max(pre_max,dp[k-1][i-1]-prices[i])
                dp[k][i]=max(dp[k][i-1],prices[i]+pre_max)
        return dp[-1][-1]
            
